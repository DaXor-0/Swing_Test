{
  "config_metadata": {
    "schema_version": "1.1.0",
    "created": "2024-01-30",
    "last_modified": "2024-02-01",
    "authors": [
      "Saverio Pasqualoni"
    ],
    "description": "MPI collective algorithm configuration file for the test selection script"
  },
  "collective": {
    "ALLREDUCE": {
      "0": {
        "name": "DEFAULT_OMPI",
        "desc": "Open MPI default algorithm selection",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "default",
          "internal"
        ]
      },
      "1": {
        "name": "LINEAR_OMPI",
        "desc": "Open MPI linear algorithm from `basic` module, consists in a Reduce to rank 0 followed by a Bcast. Both Reduce and Bcast are the one from the `basic` module. This algorithm is used for small messages. It can crash for big tests",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "linear",
          "small_sizes",
          "can_crash",
          "internal"
        ]
      },
      "2": {
        "name": "NON_OVERLAPPING_OMPI",
        "desc": "Open MPI non-overlapping algorithm, consists in a Reduce to rank 0 followed by a Bcast. Utilizes default Reduce and Bcast algorithm selection. This algorithm is used for small messages. It can crash for big tests",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "non_overlapping",
          "small_sizes",
          "ompi",
          "can_crash",
          "internal"
        ]
      },
      "3": {
        "name": "RECURSIVE_DOUBLING_OMPI",
        "desc": "Open MPI recursive doubling algorithm. This algorithm is used for small to medium messages",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "recursive_doubling",
          "small_sizes",
          "medium_sizes",
          "internal"
        ]
      },
      "4": {
        "name": "RING_OMPI",
        "desc": "Open MPI ring algorithm. Not to be used if `count`<`comm_sz`. If invoked on `count`<`comm_sz` defaults to `recursive_doubling`. This algorithm is used for large messages",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "tags": [
          "ring",
          "large_sizes",
          "internal"
        ]
      },
      "5": {
        "name": "RING_SEGMENTED_OMPI",
        "desc": "Open MPI ring segmented algorithm. Not to be used if `count`<`comm_sz`. If invoked on `count`<`comm_sz` defaults to `recursive_doubling`. This algorithm is used for large messages",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "additional_parameters": {
          "segsize": {
            "desc": "Size of the segments used to pipeline communication and computation. When set to 0 (default) the tuned module uses heuristics to choose one. To select a different one, the third number of dynamic file rule (after algorithm number) must be changed.",
            "required": false,
            "type": "int",
            "default": 0
          }
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "tags": [
          "ring_segmented",
          "ring",
          "segmented",
          "additional_parameter",
          "large_sizes",
          "internal"
        ]
      },
      "6": {
        "name": "RABENSEIFNER_OMPI",
        "desc": "Open MPI Rabenseifner algorithm. Not to be used if `count`<`comm_sz`. Not to be used if `op` is not commutative. If used on not commutative `op` defaults to `OMPI_LINEAR`. This algorithm is used for medium to large messages",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "tags": [
          "rabenseifner",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "7": {
        "name": "ALLGATHER_REDUCE_OMPI",
        "desc": "Open MPI allgather reduce algorithm. This algorithm is used for small messages. It can crash for big tests",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "allgather_reduce",
          "small_sizes",
          "can_crash",
          "internal"
        ]
      },
      "8": {
        "name": "SWING_LAT_OMPI",
        "desc": "Open MPI internal swing latency optimal algorithm of `OMPI_TEST`. This algorithm is used for small to medium messages",
        "library": {
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "swing_lat",
          "swing",
          "latency_optimal",
          "small_sizes",
          "medium_sizes",
          "internal"
        ]
      },
      "9": {
        "name": "SWING_BDW_MEMCPY_OMPI",
        "desc": "Open MPI internal swing bandwidth optimal algorithm of `OMPI_TEST`. Not to be used if `count`<`comm_sz`. Works only with power of 2 processes. This version leverages a memcpy operation to send a contiguous buffer. This algorithm is used for medium to large messages",
        "library": {
          "ompi_test": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          },
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "swing_bdw_memcpy",
          "swing",
          "bandwidth_optimal",
          "memcpy",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "10": {
        "name": "SWING_BDW_DT_1_OMPI",
        "desc": "Open MPI internal swing bandwidth optimal algorithm of `OMPI_TEST`. Not to be used if `count`<`comm_sz`. Works only with power of 2 processes. This version creates derived datatype to use a single send operation but requires the heap allocation, creation and destruction of 2*`comm_sz` derived datatypes. This algorithm is used for medium to large messages",
        "library": {
          "ompi_test": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          },
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "swing_bdw_dt_1",
          "swing",
          "bandwidth_optimal",
          "derived_datatypes",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "11": {
        "name": "SWING_BDW_DT_2_OMPI",
        "desc": "Open MPI internal swing bandwidth optimal algorithm of `OMPI_TEST`. Not to be used if `count`<`comm_sz`. Works only with power of 2 processes. This version creates derived datatype to use a single send operation and receive the message to a continuous buffer. Does not require the heap allocation of datatype array since it utilizes a single stack allocated one, overwriting it each time. This algorithm is used for medium to large messages",
        "library": {
          "ompi_test": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          },
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "swing_bdw_dt_2",
          "swing",
          "bandwidth_optimal",
          "derived_datatypes",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "12": {
        "name": "SWING_BDW_SEGMENTED_OMPI",
        "desc": "Open MPI internal swing bandwidth optimal algorithm of `OMPI_TEST`. Not to be used if `count`<`comm_sz`. Works only with power of 2 processes. This version utilizes many pipelined asyncrhonous send/recv operation to overlap communication and reduction. It requires an additional parameter `segsize`. This algorithm is used for medium to large messages",
        "library": {
          "ompi_test": ">=1.0.0"
        },
        "additional_parameters": {
          "segsize": {
            "desc": "Size of the segments used to pipeline communication and computation. When set to 0 (default) the tuned module uses heuristics to choose one. To select a different one, the third number of dynamic file rule (after algorithm number) must be changed.",
            "required": false,
            "type": "int",
            "default": 0
          }
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          },
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "swing_bdw_segmented",
          "swing",
          "bandwidth_optimal",
          "segmented",
          "additional_parameter",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "13": {
        "name": "SWING_BDW_STATIC_OMPI",
        "desc": "Open MPI internal swing bandwidth optimal algorithm of `OMPI_TEST`. Not to be used if `count`<`comm_sz`. Works only with power of 2 processes, less or equal to 256. This version utilizes static bitmaps reordered to be contigous. This algorithm is used for medium to large messages",
        "library": {
          "ompi_test": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          },
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              },
              {
                "operator": "<=",
                "value": 256
              }
            ]
          }
        ],
        "tags": [
          "swing_bdw_static",
          "swing",
          "bandwidth_optimal",
          "static",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "101": {
        "name": "RECURSIVE_DOUBLING_OVER",
        "desc": "Libswing external recursive doubling algorithm. This algorithm is used for small to medium messages",
        "library": {
          "libswing": ">=1.0.0"
        },
        "tags": [
          "recursive_doubling",
          "small_sizes",
          "medium_sizes",
          "external"
        ]
      },
      "102": {
        "name": "RING_OVER",
        "desc": "Libswing external ring algorithm. Not to be used if `count`<`comm_sz`. This algorithm is used for large messages",
        "library": {
          "libswing": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "tags": [
          "ring",
          "large_sizes",
          "external"
        ]
      },
      "103": {
        "name": "RABENSEIFNER_OVER",
        "desc": "Libswing external Rabenseifner algorithm. Not to be used if `count`<`comm_sz` and for non commutative `op`. This algorithm is used for medium to large messages",
        "library": {
          "libswing": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "tags": [
          "rabenseifner",
          "medium_sizes",
          "large_sizes",
          "external"
        ]
      },
      "201": {
        "name": "SWING_LAT_OVER",
        "desc": "Libswing external swing latency optimal algorithm. This algorithm is used for small to medium messages",
        "library": {
          "libswing": ">=1.0.0"
        },
        "tags": [
          "swing_lat",
          "swing",
          "latency_optimal",
          "small_sizes",
          "medium_sizes",
          "external"
        ]
      },
      "202": {
        "name": "SWING_BDW_STATIC_OVER",
        "desc": "Libswing external swing bandwidth optimal algorithm. Not to be used if `count`<`comm_sz`. Works only with power of 2 processes, less or equal to 256. This version utilizes static bitmaps reordered to be contigous. This algorithm is used for medium to large messages",
        "library": {
          "libswing": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          },
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              },
              {
                "operator": "<=",
                "value": 256
              }
            ]
          }
        ],
        "tags": [
          "swing_bdw_static",
          "swing",
          "bandwidth_optimal",
          "static",
          "medium_sizes",
          "large_sizes",
          "external"
        ]
      }
    },
    "ALLGATHER": {
      "0": {
        "name": "DEFAULT_OMPI",
        "desc": "Open MPI default algorithm selection",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "default",
          "internal"
        ]
      },
      "1": {
        "name": "LINEAR_OMPI",
        "desc": " Open MPI linear algorithm, consists in a Gather to rank 0 of the whole message followed by a Bcast. Utilizes default Gather and Bcast algorithm selection. This algorithm is used for small messages. It can crash for big tests",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "linear",
          "small_sizes",
          "can_crash",
          "internal"
        ]
      },
      "2": {
        "name": "K_BRUCK_OMPI",
        "desc": "Open MPI K-nomial Bruck algorithm. It requires an additional parameter `radix`. This algorithm is used for medium to large messages",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "additional_parameters": {
          "radix": {
            "desc": "Radix of the K-nomial tree. When not explicitly set it defaults to 2. Still don't know how to change it.",
            "required": false,
            "type": "int",
            "default": 2
          }
        },
        "tags": [
          "k_bruck",
          "additional_parameter",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "3": {
        "name": "RECURSIVE_DOUBLING_OMPI",
        "desc": "Open MPI recursive doubling algorithm. This algorithm is used for small to medium messages. Works only on power of 2 processes. When invoked on non power of 2 processes, it will fallback to k_bruck with `radix=2`",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "recursive_doubling",
          "small_sizes",
          "medium_sizes",
          "internal"
        ]
      },
      "4": {
        "name": "RING_OMPI",
        "desc": "Open MPI ring algorithm. This algorithm is used for large messages",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "ring",
          "large_sizes",
          "internal"
        ]
      },
      "5": {
        "name": "NEIGHBOR_OMPI",
        "desc": "Open MPI neighbor exchange algorithm. This algorithm is used for large messages. Works only for even number of processes. When invoked on odd number of processes, it will fallback to ring",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_even",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "neighbor",
          "large_sizes",
          "internal"
        ]
      },
      "6": {
        "name": "TWO_PROC_OMPI",
        "desc": "Open MPI two processes algorithm. Works only for 2 processes",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "==",
                "value": 2
              }
            ]
          }
        ],
        "tags": [
          "two_proc",
          "internal"
        ]
      },
      "101": {
        "name": "K_BRUCK_OVER",
        "desc": "Libswing external K-nomial Bruck algorithm. It requires an additional parameter `radix`. This algorithm is used for medium to large messages",
        "library": {
          "libswing": ">=1.0.0"
        },
        "additional_parameters": {
          "radix": {
            "desc": "Radix of the K-nomial tree",
            "required": true,
            "type": "int"
          }
        },
        "tags": [
          "k_bruck",
          "additional_parameter",
          "medium_sizes",
          "large_sizes",
          "external"
        ]
      },
      "102": {
        "name": "RECURSIVE_DOUBLING_OVER",
        "desc": "Libswing external recursive doubling algorithm. This algorithm is used for small to medium messages. Works only on power of 2 processes",
        "library": {
          "libswing": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "recursive_doubling",
          "small_sizes",
          "medium_sizes",
          "external"
        ]
      },
      "103": {
        "name": "RING_OVER",
        "desc": "Libswing external ring algorithm. This algorithm is used for large messages",
        "library": {
          "libswing": ">=1.0.0"
        },
        "tags": [
          "ring",
          "large_sizes",
          "external"
        ]
      },
      "201": {
        "name": "SWING_STATIC_OVER",
        "desc": "Libswing external swing static algorithm. Works only for power of 2 processes, less or equal to 32. This algorithm is used for medium to large messages",
        "library": {
          "libswing": ">=1.0.0"
        },
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              },
              {
                "operator": "<=",
                "value": 32
              }
            ]
          }
        ],
        "tags": [
          "swing_static",
          "swing",
          "medium_sizes",
          "large_sizes",
          "external"
        ]
      }
    },
    "REDUCE_SCATTER": {
      "0": {
        "name": "DEFAULT_OMPI",
        "desc": "Open MPI default algorithm selection",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "default",
          "internal"
        ]
      },
      "1": {
        "name": "NON_OVERLAPPING_OMPI",
        "desc": "Open MPI non-overlapping algorithm. Consists in a Reduce to rank 0 followed by a Scatterv. Utilizes default Reduce and Scatterv algorithm selection. This algorithm is used for small messages. It can crash for big tests",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "non_overlapping",
          "small_sizes",
          "can_crash",
          "internal"
        ]
      },
      "2": {
        "name": "RECURSIVE_HALVING_OMPI",
        "desc": "Open MPI recursive halving algorithm. Similar to `basic`'s reduce scatter. Works only for commutative `op`. This algorithm is used for small to medium messages",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "recursive_halving",
          "small_sizes",
          "medium_sizes",
          "internal"
        ]
      },
      "3": {
        "name": "RING_OMPI",
        "desc": "Open MPI ring algorithm. Works only on commutative `op`. This algorithm is used for large messages",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "ring",
          "large_sizes",
          "internal"
        ]
      },
      "4": {
        "name": "BUTTERFLY_OMPI",
        "desc": "Open MPI butterfly algorithm. This algorithm is used for small messages",
        "library": {
          "ompi": ">=5.0.0",
          "ompi_test": ">=1.0.0"
        },
        "tags": [
          "butterfly",
          "small_sizes",
          "can_crash",
          "internal"
        ]
      },
      "101": {
        "name": "RECURSIVE_HALVING_OVER",
        "desc": "Libswing external recursive halving algorithm. Similar to `basic`'s reduce scatter. Works only for commutative `op`. This algorithm is used for small to medium messages",
        "library": {
          "libswing": ">=1.0.0"
        },
        "tags": [
          "recursive_halving",
          "small_sizes",
          "medium_sizes",
          "external"
        ]
      },
      "102": {
        "name": "RING_OVER",
        "desc": "Libswing external ring algorithm. Works only on commutative `op`. This algorithm is used for large messages",
        "library": {
          "libswing": ">=1.0.0"
        },
        "tags": [
          "ring",
          "large_sizes",
          "external"
        ]
      },
      "103": {
        "name": "BUTTERFLY_OVER",
        "desc": "Libswing external butterfly algorithm. This algorithm is used for small messages",
        "library": {
          "libswing": ">=1.0.0"
        },
        "tags": [
          "butterfly",
          "small_sizes",
          "can_crash",
          "external"
        ]
      }
    }
  }
}
