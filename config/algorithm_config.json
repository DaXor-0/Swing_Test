{
  "config_metadata": {
    "schema_version": "2.5.0",
    "created": "2024-01-30",
    "last_modified": "2024-02-22",
    "authors": [
      "Saverio Pasqualoni"
    ],
    "description": "MPI collective algorithm configuration file for the test selection script"
  },
  "collective": {
    "ALLREDUCE": {
      "default_cray_mpich": {
        "desc": "Cray MPICH default algorithm selection",
        "library": {
          "cray_mpich": "8.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "default",
          "internal"
        ]
      },
      "default_ompi": {
        "desc": "Open MPI default algorithm selection",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "default",
          "internal"
        ]
      },
      "linear_ompi": {
        "desc": "Open MPI linear algorithm from `basic` module, consists in a Reduce to rank 0 followed by a Bcast. Both Reduce and Bcast are the one from the `basic` module. This algorithm is used for small messages. It can crash for big tests",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 1,
        "tags": [
          "linear",
          "small_sizes",
          "can_crash",
          "internal"
        ]
      },
      "non_overlapping_ompi": {
        "desc": "Open MPI non-overlapping algorithm, consists in a Reduce to rank 0 followed by a Bcast. Utilizes default Reduce and Bcast algorithm selection. This algorithm is used for small messages. It can crash for big tests",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 2,
        "tags": [
          "non_overlapping",
          "small_sizes",
          "can_crash",
          "internal"
        ]
      },
      "recursive_doubling_ompi": {
        "desc": "Open MPI recursive doubling algorithm. This algorithm is used for small to medium messages",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 3,
        "tags": [
          "recursive_doubling",
          "small_sizes",
          "medium_sizes",
          "internal"
        ]
      },
      "ring_ompi": {
        "desc": "Open MPI ring algorithm. Not to be used if `count`<`comm_sz`. If invoked on `count`<`comm_sz` defaults to `recursive_doubling`. This algorithm is used for large messages",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 4,
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "tags": [
          "ring",
          "large_sizes",
          "internal"
        ]
      },
      "ring_segmented_ompi": {
        "desc": "Open MPI ring segmented algorithm. Not to be used if `count`<`comm_sz`. If invoked on `count`<`comm_sz` defaults to `recursive_doubling`. This algorithm is used for large messages",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 5,
        "additional_parameters": {
          "segsize": {
            "desc": "Size of the segments used to pipeline communication and computation. When set to 0 (default) the tuned module uses heuristics to choose one. To select a different one, the third number of dynamic file rule (after algorithm number) must be changed.",
            "required": false,
            "type": "int",
            "default": 0
          }
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "tags": [
          "ring_segmented",
          "ring",
          "segmented",
          "additional_parameter",
          "large_sizes",
          "internal"
        ]
      },
      "rabenseifner_ompi": {
        "desc": "Open MPI Rabenseifner algorithm. Not to be used if `count`<`comm_sz`. Not to be used if `op` is not commutative. If used on not commutative `op` defaults to `OMPI_LINEAR`. This algorithm is used for medium to large messages",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 6,
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "tags": [
          "rabenseifner",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "allgather_reduce_ompi": {
        "desc": "Open MPI allgather reduce algorithm. This algorithm is used for small messages. It can crash for big tests",
        "library": {
          "ompi": "5.0.0",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 7,
        "tags": [
          "allgather_reduce",
          "small_sizes",
          "can_crash",
          "internal"
        ]
      },
      "swing_lat_ompi": {
        "desc": "Open MPI internal swing latency optimal algorithm of `OMPI_SWING`. This algorithm is used for small to medium messages",
        "library": {
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 8,
        "tags": [
          "swing_lat",
          "swing",
          "latency_optimal",
          "small_sizes",
          "medium_sizes",
          "internal"
        ]
      },
      "swing_bdw_memcpy_ompi": {
        "desc": "Open MPI internal swing bandwidth optimal algorithm of `OMPI_SWING`. Not to be used if `count`<`comm_sz`. Works only with power of 2 processes. This version leverages a memcpy operation to send a contiguous buffer. This algorithm is used for medium to large messages",
        "library": {
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 9,
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          },
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "swing_bdw_memcpy",
          "swing",
          "bandwidth_optimal",
          "suboptimal",
          "memcpy",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "swing_bdw_dt_1_ompi": {
        "desc": "Open MPI internal swing bandwidth optimal algorithm of `OMPI_SWING`. Not to be used if `count`<`comm_sz`. Works only with power of 2 processes. This version creates derived datatype to use a single send operation but requires the heap allocation, creation and destruction of 2*`comm_sz` derived datatypes. This algorithm is used for medium to large messages",
        "library": {
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 10,
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          },
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "swing_bdw_dt_1",
          "swing",
          "bandwidth_optimal",
          "suboptimal",
          "derived_datatypes",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "swing_bdw_dt_2_ompi": {
        "desc": "Open MPI internal swing bandwidth optimal algorithm of `OMPI_SWING`. Not to be used if `count`<`comm_sz`. Works only with power of 2 processes. This version creates derived datatype to use a single send operation and receive the message to a continuous buffer. Does not require the heap allocation of datatype array since it utilizes a single stack allocated one, overwriting it each time. This algorithm is used for medium to large messages",
        "library": {
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 11,
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          },
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "swing_bdw_dt_2",
          "swing",
          "bandwidth_optimal",
          "suboptimal",
          "derived_datatypes",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "swing_bdw_segmented_ompi": {
        "desc": "Open MPI internal swing bandwidth optimal algorithm of `OMPI_SWING`. Not to be used if `count`<`comm_sz`. Works only with power of 2 processes. This version utilizes many pipelined asyncrhonous send/recv operation to overlap communication and reduction. It requires an additional parameter `segsize`. This algorithm is used for medium to large messages",
        "library": {
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 12,
        "additional_parameters": {
          "segsize": {
            "desc": "Size of the segments used to pipeline communication and computation. When set to 0 (default) the tuned module uses heuristics to choose one. To select a different one, the third number of dynamic file rule (after algorithm number) must be changed.",
            "required": false,
            "type": "int",
            "default": 0
          }
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          },
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "swing_bdw_segmented",
          "swing",
          "bandwidth_optimal",
          "suboptimal",
          "segmented",
          "additional_parameter",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "swing_bdw_static_ompi": {
        "desc": "Open MPI internal swing bandwidth optimal algorithm of `OMPI_SWING`. Not to be used if `count`<`comm_sz`. Works only with power of 2 processes, less or equal to 256. This version utilizes static bitmaps reordered to be contigous. This algorithm is used for medium to large messages",
        "library": {
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 13,
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          },
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              },
              {
                "operator": "<=",
                "value": 256
              }
            ]
          }
        ],
        "tags": [
          "swing_bdw_static",
          "swing",
          "bandwidth_optimal",
          "static",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "recursive_doubling_over": {
        "desc": "Libswing external recursive doubling algorithm. This algorithm is used for small to medium messages",
        "library": {
          "libswing": "1.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "recursive_doubling",
          "small_sizes",
          "medium_sizes",
          "external"
        ]
      },
      "ring_over": {
        "desc": "Libswing external ring algorithm. Not to be used if `count`<`comm_sz`. This algorithm is used for large messages",
        "library": {
          "libswing": "1.0.0"
        },
        "dynamic_rule": 0,
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "tags": [
          "ring",
          "large_sizes",
          "external"
        ]
      },
      "rabenseifner_over": {
        "desc": "Libswing external Rabenseifner algorithm. Not to be used if `count`<`comm_sz` and for non commutative `op`. This algorithm is used for medium to large messages",
        "library": {
          "libswing": "1.0.0"
        },
        "dynamic_rule": 0,
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "tags": [
          "rabenseifner",
          "medium_sizes",
          "large_sizes",
          "external"
        ]
      },
      "swing_lat_over": {
        "desc": "Libswing external swing latency optimal algorithm. This algorithm is used for small to medium messages",
        "library": {
          "libswing": "1.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "swing_lat",
          "swing",
          "latency_optimal",
          "small_sizes",
          "medium_sizes",
          "external"
        ]
      },
      "swing_bdw_static_over": {
        "desc": "Libswing external swing bandwidth optimal algorithm. Not to be used if `count`<`comm_sz`. Works only with power of 2 processes, less or equal to 256. This version utilizes static bitmaps reordered to be contigous. This algorithm is used for medium to large messages",
        "library": {
          "libswing": "1.0.0"
        },
        "dynamic_rule": 0,
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          },
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              },
              {
                "operator": "<=",
                "value": 256
              }
            ]
          }
        ],
        "tags": [
          "swing_bdw_static",
          "swing",
          "bandwidth_optimal",
          "static",
          "medium_sizes",
          "large_sizes",
          "external"
        ]
      }
    },
    "ALLGATHER": {
      "default_cray_mpich": {
        "desc": "Cray MPICH default algorithm selection",
        "library": {
          "cray_mpich": "8.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "default",
          "internal"
        ]
      },
      "default_ompi": {
        "desc": "Open MPI default algorithm selection",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "default",
          "internal"
        ]
      },
      "linear_ompi": {
        "desc": " Open MPI linear algorithm, consists in a Gather to rank 0 of the whole message followed by a Bcast. Utilizes default Gather and Bcast algorithm selection. This algorithm is used for small messages. It can crash for big tests",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 1,
        "tags": [
          "linear",
          "small_sizes",
          "can_crash",
          "internal"
        ]
      },
      "k_bruck_ompi": {
        "desc": "Open MPI K-nomial Bruck algorithm. It requires an additional parameter `radix`. This algorithm is used for medium to large messages",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 2,
        "additional_parameters": {
          "radix": {
            "desc": "Radix of the K-nomial tree. When not explicitly set it defaults to 2. Still don't know how to change it.",
            "required": false,
            "type": "int",
            "default": 2
          }
        },
        "tags": [
          "k_bruck",
          "can_crash",
          "additional_parameter",
          "medium_sizes",
          "large_sizes",
          "internal"
        ]
      },
      "recursive_doubling_ompi": {
        "desc": "Open MPI recursive doubling algorithm. This algorithm is used for small to medium messages. Works only on power of 2 processes. When invoked on non power of 2 processes, it will fallback to k_bruck with `radix=2`",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 3,
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "recursive_doubling",
          "small_sizes",
          "medium_sizes",
          "internal"
        ]
      },
      "ring_ompi": {
        "desc": "Open MPI ring algorithm. This algorithm is used for large messages",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 4,
        "tags": [
          "ring",
          "large_sizes",
          "internal"
        ]
      },
      "neighbor_ompi": {
        "desc": "Open MPI neighbor exchange algorithm. This algorithm is used for large messages. Works only for even number of processes. When invoked on odd number of processes, it will fallback to ring",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 5,
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_even",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "neighbor",
          "large_sizes",
          "internal"
        ]
      },
      "two_proc_ompi": {
        "desc": "Open MPI two processes algorithm. Works only for 2 processes",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 6,
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "==",
                "value": 2
              }
            ]
          }
        ],
        "tags": [
          "two_proc",
          "internal"
        ]
      },
      "k_bruck_over": {
        "desc": "Libswing external K-nomial Bruck algorithm. It requires an additional parameter `radix`. This algorithm is used for medium to large messages",
        "library": {
          "libswing": "1.0.0"
        },
        "dynamic_rule": 0,
        "additional_parameters": {
          "radix": {
            "desc": "Radix of the K-nomial tree",
            "required": true,
            "type": "int"
          }
        },
        "tags": [
          "k_bruck",
          "can_crash",
          "additional_parameter",
          "medium_sizes",
          "large_sizes",
          "external"
        ]
      },
      "recursive_doubling_over": {
        "desc": "Libswing external recursive doubling algorithm. This algorithm is used for small to medium messages. Works only on power of 2 processes",
        "library": {
          "libswing": "1.0.0"
        },
        "dynamic_rule": 0,
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          }
        ],
        "tags": [
          "recursive_doubling",
          "small_sizes",
          "medium_sizes",
          "external"
        ]
      },
      "ring_over": {
        "desc": "Libswing external ring algorithm. This algorithm is used for large messages",
        "library": {
          "libswing": "1.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "ring",
          "large_sizes",
          "external"
        ]
      },
      "swing_static_over": {
        "desc": "Libswing external swing static algorithm. Works only for power of 2 processes, less or equal to 32. This algorithm is used for medium to large messages",
        "library": {
          "libswing": "1.0.0"
        },
        "dynamic_rule": 0,
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              },
              {
                "operator": "<=",
                "value": 32
              }
            ]
          }
        ],
        "tags": [
          "swing_static",
          "swing",
          "medium_sizes",
          "large_sizes",
          "external"
        ]
      }
    },
    "BCAST": {
      "default_cray_mpich": {
        "desc": "Cray MPICH default algorithm selection",
        "library": {
          "cray_mpich": "8.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "default",
          "internal"
        ]
      },
      "default_ompi": {
        "desc": "Open MPI default algorithm selection",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "default",
          "internal"
        ]
      },
      "linear_ompi": {
        "desc": "Open MPI linear algorithm, consists in root performing comm_sz - 1 send operations, one to each other process. All other processes perform a single receive operation. It can crash for big tests",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 1,
        "tags": [
          "linear",
          "can_crash",
          "internal"
        ]
      },
      "chain_ompi": {
        "desc": "Open MPI chain algorithm. Segments the message using the additional_parameter `segsize` pipelining their send operations to the next process of a chain topology. Each non process posts non blocking receive operations and sends the message to the next process. The actual broadcast is done by `ompi_coll_base_bcast_intra_generic` while `ompi_coll_base_bcast_intra_chain` is responsible for the segmentation and the check/creation of the chain topology.",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "additional_parameters": {
          "segsize": {
            "desc": "Size of the segments used to pipeline communication and computation. When set to 0 (default) the tuned module uses heuristics to choose one. To select a different one, the third number of dynamic file rule (after algorithm number) must be changed.",
            "required": false,
            "type": "uint32_t",
            "default": 0
          },
          "chains": {
            "desc": "I think this is the number of chains. Not sure how to change it. For sure is a Communicator related parameter. Look for `faninout` for more details, I'll leave as it is.",
            "required": false,
            "type": "int32_t",
            "default": 0
          }
        },
        "dynamic_rule": 2,
        "tags": [
          "chain",
          "segmented",
          "additional_parameter",
          "internal"
        ]
      },
      "pipeline_ompi": {
        "desc": "Open MPI pipeline algorithm. Segments the message using the additional_parameter `segsize` pipelining their send operations to the next process into a pipeline. Each non process posts non blocking receive operations and sends the message to the next process. The actual broadcast is done by `ompi_coll_base_bcast_intra_generic` while `ompi_coll_base_bcast_intra_pipeline` is responsible for the segmentation and the check/creation of the pipelined topology.",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "additional_parameters": {
          "segsize": {
            "desc": "Size of the segments used to pipeline communication and computation. When set to 0 (default) the tuned module uses heuristics to choose one. To select a different one, the third number of dynamic file rule (after algorithm number) must be changed.",
            "required": false,
            "type": "uint32_t",
            "default": 0
          }
        },
        "dynamic_rule": 3,
        "tags": [
          "pipeline",
          "segmented",
          "additional_parameter",
          "internal"
        ]
      },
      "split_binary_ompi": {
        "desc": "Open MPI split‐binary tree broadcast. It divides the overall message into two halves and then uses a binary‐tree–based dissemination within each half, followed by a final exchange to “stitch” the two halves together where every process finds its pair in the other branch of the tree. Uses the additional parameter `segsize` to further segment the communications. If message is to small it will fallback to `chain_ompi`.",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "additional_parameters": {
          "segsize": {
            "desc": "Size of the segments used to pipeline communication and computation.",
            "required": false,
            "type": "uint32_t",
            "default": 0
          }
        },
        "dynamic_rule": 4,
        "tags": [
          "split_binary",
          "additional_parameter",
          "segmented",
          "internal"
        ]
      },
      "binary_ompi": {
        "desc": "Open MPI binary tree broadcast. It uses the `ompi_coll_base_bcast_intra_generic` for the actual broadcast. This function is responsible for the check/creation of the binary tree topology and for the segmentation of the message.",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "additional_parameters": {
          "segsize": {
            "desc": "Size of the segments used to pipeline communication and computation.",
            "required": false,
            "type": "uint32_t",
            "default": 0
          }
        },
        "dynamic_rule": 5,
        "tags": [
          "binary",
          "segmented",
          "additional_parameter",
          "internal"
        ]
      },
      "binomial_ompi": {
        "desc": "Open MPI binomial tree broadcast. It uses the `ompi_coll_base_bcast_intra_generic` for the actual broadcast. This function is responsible for the check/creation of the binomial tree topology and for the segmentation of the message.",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "additional_parameters": {
          "segsize": {
            "desc": "Size of the segments used to pipeline communication and computation.",
            "required": false,
            "type": "uint32_t",
            "default": 0
          }
        },
        "dynamic_rule": 6,
        "tags": [
          "binomial",
          "segmented",
          "additional_parameter",
          "internal"
        ]
      },
      "knomial_ompi": {
        "desc": "Open MPI k-nomial tree broadcast. It uses the `ompi_coll_base_bcast_intra_generic` for the actual broadcast. This function is responsible for the check/creation of the k-nomial tree topology and for the segmentation of the message. It requires an additional parameter `radix`.",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "additional_parameters": {
          "radix": {
            "desc": "Radix of the K-nomial tree",
            "required": true,
            "type": "int"
          },
          "segsize": {
            "desc": "Size of the segments used to pipeline communication and computation.",
            "required": false,
            "type": "uint32_t",
            "default": 0
          }
        },
        "dynamic_rule": 7,
        "tags": [
          "knomial",
          "additional_parameter",
          "segmented",
          "internal"
        ]
      },
      "scatter_allgather_ompi": {
        "desc": "Open MPI scatter allgather algorithm. It consists of a binomial tree scatter followed by a recursive doubling allgather. It requires `count` to be greater than `comm_sz`. If not, it will fallback to `linear`'s bcast. It requires an additional parameter `segsize` but it appears by the code to not be used.",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "additional_parameters": {
          "segsize": {
            "desc": "Size of the segments used to pipeline communication and computation.",
            "required": false,
            "type": "uint32_t",
            "default": 0
          }
        },
        "dynamic_rule": 8,
        "tags": [
          "scatter_allgather",
          "segmented",
          "additional_parameter",
          "internal"
        ]
      },
      "scatter_allgather_ring_ompi": {
        "desc": "Open MPI scatter allgather ring algorithm. It consists of a binomial tree scatter followed by a ring allgather. It requires `count` to be greater than `comm_sz`. If not, it will fallback to `linear`'s bcast. It requires an additional parameter `segsize` but it appears by the code to not be used.",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "additional_parameters": {
          "segsize": {
            "desc": "Size of the segments used to pipeline communication and computation.",
            "required": false,
            "type": "uint32_t",
            "default": 0
          }
        },
        "dynamic_rule": 9,
        "tags": [
          "scatter_allgather_ring",
          "segmented",
          "additional_parameter",
          "internal"
        ]
      },
      "scatter_allgather_over": {
        "desc": "Libswing external scatter allgather algorithm. It consists of a binomial tree scatter followed by a recursive doubling allgather. It requires `count` to be greater than `comm_sz`.",
        "library": {
          "libswing": "1.0.0"
        },
        "constraints": [
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "dynamic_rule": 0,
        "tags": [
          "scatter_allgather",
          "segmented",
          "external"
        ]
      },
      "swing_lat_over": {
        "desc": "Libswing external swing latency optimal algorithm. This algorithm uses a binomial tree pattern of communication choosing its peer utilizing `swing` peer selection method `pi`. It works only if `comm` is a power of 2 and root is 0.",
        "library": {
          "libswing": "1.0.0"
        },
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              }
            ]
          },
          {
            "key": "root",
            "conditions": [
              {
                "operator": "==",
                "value": 0
              }
            ]
          }
        ],
        "dynamic_rule": 0,
        "tags": [
          "swing_lat",
          "swing",
          "latency_optimal",
          "external"
        ]
      },
      "swing_bdw_static_over": {
        "desc": "Libswing external swing bandwidth optimal algorithm with static bitmaps. This algorithm is a combination of a swing scatter and a swing allgather and utilizes static bitmaps. It does not utilizes standard collectives written elsewere since for the allgather phase it calculates which rank needs to send and which don't to avoid wasteful communications. It works only if `comm` is a power of 2 less or equal to 256 and root is 0. Also count must be greater than comm_sz.",
        "library": {
          "libswing": "1.0.0"
        },
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              },
              {
                "operator": "<=",
                "value": 256
              }
            ]
          },
          {
            "key": "root",
            "conditions": [
              {
                "operator": "==",
                "value": 0
              }
            ]
          },
          {
            "key": "count",
            "conditions": [
              {
                "operator": ">=",
                "value": "comm_sz"
              }
            ]
          }
        ],
        "dynamic_rule": 0,
        "tags": [
          "swing_bdw_static",
          "swing",
          "bandwidth_optimal",
          "static",
          "external"
        ]
      }
    },
    "REDUCE_SCATTER": {
      "default_cray_mpich": {
        "desc": "Cray MPICH default algorithm selection",
        "library": {
          "cray_mpich": "8.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "default",
          "internal"
        ]
      },
      "default_ompi": {
        "desc": "Open MPI default algorithm selection",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "default",
          "internal"
        ]
      },
      "non_overlapping_ompi": {
        "desc": "Open MPI non-overlapping algorithm. Consists in a Reduce to rank 0 followed by a Scatterv. Utilizes default Reduce and Scatterv algorithm selection. This algorithm is used for small messages. It can crash for big tests",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 1,
        "tags": [
          "non_overlapping",
          "small_sizes",
          "can_crash",
          "internal"
        ]
      },
      "recursive_halving_ompi": {
        "desc": "Open MPI recursive halving algorithm. Similar to `basic`'s reduce scatter. Works only for commutative `op`. This algorithm is used for small to medium messages",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 2,
        "tags": [
          "recursive_halving",
          "small_sizes",
          "medium_sizes",
          "internal"
        ]
      },
      "ring_ompi": {
        "desc": "Open MPI ring algorithm. Works only on commutative `op`. This algorithm is used for large messages",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 3,
        "tags": [
          "ring",
          "large_sizes",
          "internal"
        ]
      },
      "butterfly_ompi": {
        "desc": "Open MPI butterfly algorithm. This algorithm is used for small messages",
        "library": {
          "ompi": "4.1.6",
          "ompi_swing": "5.0.0"
        },
        "dynamic_rule": 4,
        "tags": [
          "butterfly",
          "small_sizes",
          "can_crash",
          "internal"
        ]
      },
      "recursive_halving_over": {
        "desc": "Libswing external recursive halving algorithm. Similar to `basic`'s reduce scatter. Works only for commutative `op`. This algorithm is used for small to medium messages",
        "library": {
          "libswing": "1.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "recursive_halving",
          "small_sizes",
          "medium_sizes",
          "external"
        ]
      },
      "ring_over": {
        "desc": "Libswing external ring algorithm. Works only on commutative `op`. This algorithm is used for large messages",
        "library": {
          "libswing": "1.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "ring",
          "large_sizes",
          "external"
        ]
      },
      "butterfly_over": {
        "desc": "Libswing external butterfly algorithm. This algorithm is used for small messages",
        "library": {
          "libswing": "1.0.0"
        },
        "dynamic_rule": 0,
        "tags": [
          "butterfly",
          "small_sizes",
          "can_crash",
          "external"
        ]
      },
      "swing_static_over": {
        "desc": "Libswing external swing static algorithm. Works only with power of 2 processes, less or equal to 256. This version utilizes static bitmaps reordered to be contigous. This algorithm is used for medium to large messages",
        "library": {
          "libswing": "1.0.0"
        },
        "constraints": [
          {
            "key": "comm_sz",
            "conditions": [
              {
                "operator": "is_power_of_two",
                "value": true
              },
              {
                "operator": "<=",
                "value": 256
              }
            ]
          }
        ],
        "dynamic_rule": 0,
        "tags": [
          "swing",
          "static",
          "medium_sizes",
          "large_sizes",
          "external"
        ]
      }
    }
  }
}
